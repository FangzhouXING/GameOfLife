// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int ResolutionX;
int ResolutionY;

RWStructuredBuffer<int> InTileStates;
RWStructuredBuffer<int> OutTileStates;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	int sum = 0;
	for (int i = -1; i <= 1; i++) {
		for (int j = -1; j <= 1; j++) {
			if (i == 0 && j == 0) {
				continue;
			}
			int neighbor = (id.x + i) + (id.y + j) * ResolutionX;
			if (neighbor < 0 || neighbor >= ResolutionX * ResolutionY) {
				continue;
			}
			sum += InTileStates[neighbor];
		}
	}

	int index = id.x + id.y * ResolutionX;
	if (InTileStates[index] == 1) {
		if (sum == 2 || sum == 3) {
			OutTileStates[index] = 1;
		}
		else {
			OutTileStates[index] = 0;
		}
	}
	else {
		if (sum == 3) {
			OutTileStates[index] = 1;
		}
		else {
			OutTileStates[index] = 0;
		}
	}

	float color = 1.0 * OutTileStates[index];
	Result[id.xy] = float4(color, color, color, 1.0);
}
